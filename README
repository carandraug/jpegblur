jpegblur - "lossless" "blurring" of regions in JPEG image
=========================================================

jpegblur is a program to blur regions of a JPEG image while minimising
changes in the image file.

jpegblur takes bounding boxes from command line and returns a JPEG
image with those regions blurred.  It does this in DCT space thus
avoiding the introduction of new compression artifacts outside the
blurred region.  The blurring approach is the same as the one
described in [Yang et al, 2021](https://arxiv.org/abs/2103.06191).

jpegblur also preserves all metadata by copying all extra markers,
similar to jpegtran, a program distributed with libjpeg for lossless
transformation of JPEG files.

The purpose of this program is to redact Personally Identifiable
Information (PII) while avoiding any other changes to the image file.
Do note that there may be PII on the metadata and it will be copied
across untouched.  Some other tool can be used to inspect the
metadata.

See the website at https://www.robots.ox.ac.uk/~vgg/software/jpegblur/


Usage
-----

    jpegblur [x0,x1,y0,y1 ...] < input.jpg > output.jpg

Detailed documentation is available on the jpegblur man page, just run
`man jpegblur` after installation.  Have a look at `doc/jpegblur.1` to
access the documentation without installing.


Installation
------------

1. If you are not reading this from a source release, download a
   source release from https://thor.robots.ox.ac.uk/jpegblur/

2. After extracting the source release, follow the standard autotools
   dance of:

       ./configure
       make
       make install

3. Have a look at `./configure --help` for build options.

There is also a `Dockerfile` available.

If you want to build from development sources or get involved into its
development, take a peek at the `HACKING` file.


Alternatives
------------

One of the main goals of jpegblur is to completely avoid the
introduction of new image artifacts and keeping all file metadata
untouched.  If you are willing to accept some artifacts, the best you
can currently achieve in Python with PIL is described in [David
Fouhey's minimalBlur](https://github.com/dfouhey/minimalBlur/).
